{"version":3,"sources":["components/Form.js","components/Todo.js","components/todo_list.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","setTodoList","todoList","inputText","setStatus","onChange","e","target","value","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodo","App","useState","status","setFilteredTodo","useEffect","FilterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1709925f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({setInputText, setTodoList, todoList, inputText, setStatus})=>{\n  const inputTextHandler =(e)=>{\n    setInputText(e.target.value);\n  }\n  \n  const submitTodoHandler = (e) =>{\n\te.preventDefault();\n        setTodoList([...todoList,{text:inputText, completed:false, id:Math.random()*1000}]);\n        setInputText(\"\");\n  }\n\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  }\n  \n  return(\n    <form>\n        <input onChange={inputTextHandler} value={inputText} type=\"text\"\n\t  className=\"todo-input\" />\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n\t  <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <div className=\"select\" onChange={statusHandler}>\n          <select name=\"todos\" className=\"filter-todo\">\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"uncompleted\">Uncompleted</option>\n          </select>\n        </div>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nconst Todo= ({todo,setTodoList,todoList}) =>{\n\n     const deleteHandler = () => {\n\t\tsetTodoList(todoList.filter((el)=> el.id !== todo.id));\n\t }\n     const completeHandler = () => {\n\t     setTodoList(todoList.map((item) => {\n\t\t     if(item.id === todo.id){\n\t\t\t     return{\n\t\t\t\t     ...item,completed : !item.completed\n\t\t             };\n\t\t     }\n\t\t     return item;\n\t     }));\n     }\n     return(\n\t <div className=\"todo\">\n\t     <li className={todo.completed?\"completed\":\"todo-item\" }>{todo.text}</li>\n\t     <button className=\"complete-btn\" onClick={completeHandler}>\n\t     \t<i className=\"fas fa-check\"></i>\n\t     </button>\n\t     <button className=\"trash-btn\" onClick={deleteHandler}>\n\t     \t<i className=\"fas fa-trash\"></i>\n\t     </button>\n\t  </div>\n\t  );\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList= ({todoList, setTodoList, filteredTodo})=>{\n  \n  return(\n    <div className=\"todo-container\">\n    <ul className=\"todo-list\">\n      {filteredTodo.map((todo)=>(\n\t      <Todo \n\t      todo={todo} \n\t      setTodoList={setTodoList}\n\t      todoList={todoList} \n        />\n      ))}\n    </ul>\n    </div>\n  \n  );\n}\n\nexport default TodoList;\n","import React, {useState, useEffect} from 'react';\nimport \"./App.css\";\nimport Form from \"./components/Form.js\";\nimport TodoList from \"./components/todo_list.js\";\n\nfunction App(){\n\n  const[inputText,setInputText] = useState(\"\");\n  const[todoList,setTodoList] = useState([]);\n  const[status,setStatus] = useState(\"all\");\n  const[filteredTodo, setFilteredTodo] = useState([]);\n\n  useEffect(()=>FilterHandler(),[todoList, status])\n\n  const FilterHandler = () => { \n   switch(status){\n     case \"completed\":\n      setFilteredTodo(todoList.filter(todo => todo.completed === true));\n      break;\n     case \"uncompleted\":\n      setFilteredTodo(todoList.filter(todo => todo.completed === false));\n      break;\n     default:\n      setFilteredTodo(todoList);\n      break;\n    }\n  }\n  return(\n       <div className='App'>\n         <header><h1>Works to do today</h1></header> \n         <Form \n\t        setInputText={setInputText} \n\t        setTodoList={setTodoList} \n\t        todoList={todoList}\n\t        inputText={inputText}\n          setStatus={setStatus}\n          /> \n         <TodoList \n         todoList={todoList} \n         setTodoList={setTodoList}\n         filteredTodo={filteredTodo}\n         />\n       </div>\n   );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}